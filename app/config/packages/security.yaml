security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    role_hierarchy:
        ROLE_ADMIN: ROLE_MODERATOR

    password_hashers:
        App\Entity\User:
            algorithm: auto
        argon2i_encoder:
            algorithm: argon2i

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern: ^/admin
            provider: app_user_provider
            form_login:
                default_target_path: /admin
                check_path: /admin/login
                login_path: /admin/login
                remember_me: true
                success_handler: admin.authentication_success_handler
            logout:
                path: /admin/logout
                target: /admin
                delete_cookies:
                    '%env(COOKIE_NAME)%':
                        path: null
                        domain: '%env(COOKIE_DOMAIN)%'
                    SFSESSID:
                        path: null
                        domain: '%env(COOKIE_DOMAIN)%'
            jwt: ~
            entry_point: form_login
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            jwt: ~
        main:
            json_login:
                check_path: /authentication_token
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/api/graphql, roles: PUBLIC_ACCESS }
        - { path: ^/api/users/restore_password, roles: PUBLIC_ACCESS }
        - { path: ^/api/users/change_password, roles: PUBLIC_ACCESS }
        - { path: ^/api/users/register, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_MODERATOR }

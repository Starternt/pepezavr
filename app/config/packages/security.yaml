security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        memory:
            memory:
                users:
                    admin: {password: '%env(ADMIN_PASSWORD)%', roles: ['ROLE_SUPER_ADMIN']}
        entity:
            entity:
                class: 'App\User\Entity\User'
                property: 'username'

        users:
            chain:
                providers: ['memory', 'entity']

    role_hierarchy:
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    password_hashers:
        md5_encoder:
            algorithm: md5
            encode_as_base64: false
            iterations: 0
        argon2i_encoder:
            algorithm: argon2i
        bcrypt_encoder:
            algorithm: bcrypt
            cost: 10
        Symfony\Component\Security\Core\User\InMemoryUser:
            algorithm: md5
            encode_as_base64: false
            iterations: 0

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin:
            pattern: ^/admin
            provider: users
            form_login:
                default_target_path: /admin
                check_path: /admin/login
                login_path: /admin/login
                remember_me: true
            logout:
                path: /admin/logout
                target: /admin

        main:
            provider: users
            custom_authenticators:
                - App\Auth\Security\DevUserAuthenticator
                - App\Auth\Security\AccessTokenAuthenticator
            json_login:
                check_path: /api/access_tokens
                username_path: username
                password_path: password
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/api/1c/docs, roles: PUBLIC_ACCESS }
        - { path: ^/api/graphql, roles: PUBLIC_ACCESS }
        - { path: ^/api/users/restore_password, roles: PUBLIC_ACCESS }
        - { path: ^/api/users/change_password, roles: PUBLIC_ACCESS }
        - { path: ^/api/users/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/access_tokens, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api, roles: ROLE_ACTIVE_USER }
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
